<!doctype html>
<html class="bg-gray-200">
  <head>
    <%- include("./_shared/head.ejs", {
      title: "How Doxxed Am I?",
      description: "Your onchain activity might be exposing more about you than you think."
    }) %>
  </head>
  <body class="min-h-screen p-4">
    <!-- Main Content -->
    <main class="max-w-2xl mx-auto mt-8">
      <!-- Landing Page Content -->
      <div id="landing-content">
        <!-- Logo -->
        <img src="./images/logo.svg" alt="HDAI" class="h-32 mx-auto mb-8">

        <!-- Title -->
        <h1 class="text-4xl font-mono mb-6">HOW DOXXED AM I?</h1>

        <!-- Subtitle -->
        <p class="text-xl mb-12 max-w-lg mx-auto px-4">
          Your onchain activity might be exposing more about you that you think.
        </p>

        <!-- Feature Grid -->
        <div class="grid grid-cols-3 gap-8 mb-8">
          <!-- Location -->
          <div class="flex flex-col items-center">
            <img src="./images/icons/globe.svg" alt="Location" class="h-8">
            <span class="text-lg">Location</span>
          </div>

          <!-- Relationships -->
          <div class="flex flex-col items-center">
            <img src="./images/icons/connect.svg" alt="Relationships" class="h-8">
            <span class="text-lg">Relationships</span>
          </div>

          <!-- Assets -->
          <div class="flex flex-col items-center">
            <img src="./images/icons/dollar.svg" alt="Assets" class="h-8">
            <span class="text-lg">Assets</span>
          </div>
        </div>

        <!-- Second Row Grid -->
        <div class="grid grid-cols-2 mb-16">
          <!-- Names & Pseudonyms -->
          <div class="flex flex-col items-center">
            <img src="./images/ens.svg" alt="Names" class="h-8">
            <span class="text-base">Names &<br/>Pseudonyms</span>
          </div>

          <!-- Connected Wallets -->
          <div class="flex flex-col items-center">
            <img src="./images/icons/wallet.svg" alt="Wallet" class="h-8">
            <span class="text-base">Connected<br/>Wallets</span>
          </div>
        </div>

        <!-- Search Section -->
        <section class="mb-12" id="search-section">
          <h2 class="text-3xl font-bold mb-4">Audit Your Wallet Privacy</h2>
          <form id="search-form" class="relative max-w-xl mx-auto">
            <input
              type="search"
              name="wallet-address"
              id="wallet-address"
              placeholder="Wallet Address or ENS"
              class="w-full px-6 py-4 text-xl border-2 border-black rounded-lg shadow-lg pl-6 pr-16"
              required
              autocomplete="off"
              autocorrect="off"
              autocapitalize="off"
              spellcheck="false"
            >
            <button type="submit" class="absolute right-4 top-1/2 transform -translate-y-1/2 hover:opacity-70 transition-opacity">
              <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
              </svg>
            </button>
          </form>
        </section>

        <!-- Powered By Section -->
        <footer>
          <p class="text-sm mb-4 font-mono">POWERED BY</p>
          <div class="flex justify-center items-center gap-10">
            <img src="./images/1inch.png" alt="ENS" class="h-12">
            <img src="./images/world.png" alt="Worldcoin" class="h-10">
            <img src="./images/ens.svg" alt="ENS" class="h-12">
            <img src="./images/farcaster.svg" alt="Farcaster" class="h-10">
          </div>
        </footer>
      </div>

      <!-- Loading Screen (Hidden by default) -->
      <div id="loading-screen" class="hidden fixed inset-0 bg-gray-200 bg-opacity-90 flex items-center justify-center z-50">
        <div class="text-center">
          <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-black mx-auto mb-4"></div>
          <p class="font-mono text-lg">Analyzing wallet...</p>
        </div>
      </div>

      <!-- Results Section (Hidden by default) -->
      <section id="results-section" class="hidden">
        <!-- Back Button -->
        <div class="max-w-xl mx-auto mb-8">
          <button id="back-button" class="flex items-center gap-2 text-sm font-mono hover:opacity-70 transition-opacity">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"/>
            </svg>
            BACK
          </button>
        </div>

        <!-- Wallet Address -->
        <div class="max-w-xl mx-auto mb-12">
          <div class="flex items-center gap-2">
            <img src="./images/icons/wallet.svg" alt="Wallets" class="h-4">
            <h2 class="font-mono text-sm tracking-wider">Wallet</h2>
          </div>
          <p class="font-mono text-sm text-gray-500 mt-1 break-all" id="wallet-address-resolved"></p>
        </div>

        <!-- Main Content -->
        <div class="max-w-xl mx-auto space-y-12">
          <!-- Portfolio Section -->
          <section>
            <div class="flex items-center gap-2 mb-2">
              <div class="w-2 h-2 bg-black rounded-full"></div>
              <h2 class="font-mono text-sm tracking-wider">PORTFOLIO</h2>
            </div>
            <div class="flex items-baseline gap-3 mb-4">
              <span class="text-4xl font-mono font-bold tracking-wider">$7,164.51</span>
              <span class="text-red-500 font-mono">-5.53%</span>
            </div>
            <div class="h-24 w-full">
              <svg viewBox="0 0 100 30" class="w-full h-full stroke-red-500 stroke-[0.5] fill-none opacity-80">
                <path d="M0,5 Q25,10 50,15 T100,25" />
              </svg>
            </div>
            <div class="text-xs font-mono text-gray-500 mt-1">(CHAIN ICONS HERE)</div>
          </section>

          <!-- ENS Names -->
          <section>
            <div class="flex items-center gap-2 mb-4">
              <div class="w-2 h-2 bg-black rounded-full"></div>
              <h2 class="font-mono text-sm tracking-wider">ENS</h2>
            </div>
            <div class="space-y-2 font-mono text-sm" id="ens-names">
              <!-- ENS names will be populated here -->
            </div>
          </section>

          <!-- Wallet Relationships -->
          <section>
            <div class="flex items-center gap-2 mb-4">
              <div class="w-2 h-2 bg-black rounded-full"></div>
              <h2 class="font-mono text-sm tracking-wider">WALLET RELATIONSHIPS</h2>
            </div>
            <div class="font-mono text-xs">
              <p class="text-gray-500 mb-3">WALLET ADDRESS ($ TRANSACTED, TXN COUNT)</p>
              <div class="space-y-[0.35rem]" id="wallet-relationships">
                <!-- Relationships will be populated here -->
              </div>
            </div>

            <div class="mt-8 relative h-48">
              <!-- Placeholder for bubble chart -->
              <div class="absolute bottom-4 right-4 w-24 h-24 border-2 border-black rounded-full opacity-20"></div>
              <div class="absolute top-8 left-8 w-16 h-16 border-2 border-black rounded-full opacity-20"></div>
              <div class="absolute top-4 right-16 w-12 h-12 border-2 border-black rounded-full opacity-20"></div>
              <div class="absolute bottom-12 left-12 w-8 h-8 border-2 border-black rounded-full opacity-20"></div>
            </div>
          </section>

          <!-- Location Data -->
          <section>
            <div class="flex items-center gap-2 mb-4">
              <div class="w-2 h-2 bg-black rounded-full"></div>
              <h2 class="font-mono text-sm tracking-wider">LOCATION DATA</h2>
            </div>
            <h3 class="font-mono text-xs text-gray-500 mb-3">TRANSACTIONS BY TIME OF DAY (UTC)</h3>
            <div class="space-y-2 mb-6" id="timezone-data">
              <!-- Timezone data will be populated here -->
            </div>
            <p class="font-mono text-xs" id="location-text">FARCASTER LOCATION: OKINAWA, JAPAN</p>
          </section>
        </div>
      </section>
    </main>

    <script>
      // DEBUG MODE: Skip landing page and load zeni.eth
      const DEBUG_MODE = true;
      const DEBUG_ADDRESS = 'zeni.eth';

      if (DEBUG_MODE) {
        // Hide landing content and show loading immediately
        document.addEventListener('DOMContentLoaded', () => {
          console.log('[DEBUG] Auto-loading results for', DEBUG_ADDRESS);
          document.getElementById('landing-content').classList.add('hidden');
          document.getElementById('loading-screen').classList.remove('hidden');

          // Trigger the API call
          fetch(`/api/audit?address=${encodeURIComponent(DEBUG_ADDRESS)}`)
            .then(response => response.json())
            .then(data => {
              console.log('[DEBUG] API Response:', data);
              const resultsEvent = new CustomEvent('auditResults', { detail: data });
              document.dispatchEvent(resultsEvent);
            })
            .catch(error => {
              console.error('[DEBUG] Error:', error);
              const errorEvent = new CustomEvent('auditError', { detail: error });
              document.dispatchEvent(errorEvent);
            });
        });
      }

      document.getElementById('back-button').addEventListener('click', () => {
        // Hide results and show landing content
        document.getElementById('results-section').classList.add('hidden');
        document.getElementById('landing-content').classList.remove('hidden');
        // Clear the input field
        document.getElementById('wallet-address').value = '';
      });

      // Listen for audit start
      document.addEventListener('auditStart', (event) => {
        const { address } = event.detail;
        // Hide landing content and show loading screen
        document.getElementById('landing-content').classList.add('hidden');
        document.getElementById('loading-screen').classList.remove('hidden');
        // Clear resolved address
        document.getElementById('wallet-address-resolved').textContent = '';
      });

      // Listen for audit results
      document.addEventListener('auditResults', (event) => {
        const data = event.detail;

        // Hide loading screen and show results
        document.getElementById('loading-screen').classList.add('hidden');
        document.getElementById('results-section').classList.remove('hidden');

        // Show resolved address if available
        if (data.address) {
          document.getElementById('wallet-address-resolved').textContent = data.address;
        }

        // Update the UI with the data
        updateResults(data);
      });

      // Listen for audit errors
      document.addEventListener('auditError', () => {
        // Hide loading screen and show error state
        document.getElementById('loading-screen').classList.add('hidden');
        document.getElementById('results-section').classList.remove('hidden');
        document.getElementById('wallet-address-display').textContent = 'Error loading data';
      });

      function updateResults(data) {
        // Update portfolio value and chart
        if (data.value && data.value.points && data.value.points.length >= 2) {
          const latestValue = data.value.points[data.value.points.length - 1];
          const previousValue = data.value.points[data.value.points.length - 2];

          if (latestValue && previousValue && latestValue.value && previousValue.value) {
            const percentChange = ((latestValue.value - previousValue.value) / previousValue.value) * 100;

            // Format the value with commas and 2 decimal places
            const formattedValue = new Intl.NumberFormat('en-US', {
              style: 'currency',
              currency: 'USD'
            }).format(latestValue.value);

            // Update the portfolio value display
            document.querySelector('.text-4xl.font-mono').textContent = formattedValue;

            // Update the percent change
            const percentElement = document.querySelector('.text-red-500.font-mono');
            percentElement.textContent = `${percentChange >= 0 ? '+' : ''}${percentChange.toFixed(2)}%`;
            percentElement.className = `font-mono ${percentChange >= 0 ? 'text-green-500' : 'text-red-500'}`;

            // Update the chart
            const svg = document.querySelector('svg.stroke-red-500');
            const path = svg.querySelector('path');

            // Normalize the points to fit in the SVG viewBox
            const points = data.value.points.map((point, i) => ({
              x: (i / (data.value.points.length - 1)) * 100,
              y: 30 - ((point.value - Math.min(...data.value.points.map(p => p.value))) /
                      (Math.max(...data.value.points.map(p => p.value)) - Math.min(...data.value.points.map(p => p.value)))) * 25
            }));

            // Create the SVG path
            const pathD = points.reduce((acc, point, i) =>
              acc + (i === 0 ? `M ${point.x},${point.y}` : ` L ${point.x},${point.y}`), '');

            path.setAttribute('d', pathD);
            svg.className = `w-full h-full stroke-${percentChange >= 0 ? 'green' : 'red'}-500 stroke-[0.5] fill-none opacity-80`;
          } else {
            // Handle invalid value data
            document.querySelector('.text-4xl.font-mono').textContent = '$0.00';
            document.querySelector('.text-red-500.font-mono').textContent = '+0.00%';
          }
        } else {
          // Handle missing value data
          document.querySelector('.text-4xl.font-mono').textContent = '$0.00';
          document.querySelector('.text-red-500.font-mono').textContent = '+0.00%';
        }

        // Update ENS names
        const ensContainer = document.getElementById('ens-names');
        if (data.nfts) {
          const ensNFTs = data.nfts.filter(nft => nft.collectionName === 'ENS');
          if (ensNFTs.length > 0) {
            ensContainer.innerHTML = ensNFTs.map(nft =>
              `<div class="flex items-center gap-2">
                <img src="./images/ens.svg" alt="ENS" class="h-4 w-4">
                <span>${nft.name}</span>
              </div>`
            ).join('');
          } else {
            ensContainer.innerHTML = '<p class="text-gray-500">No ENS names found</p>';
          }
        }

        // Update wallet relationships
        const relationshipsContainer = document.getElementById('wallet-relationships');
        if (data.relationships && data.relationships.total) {
          const topRelationships = Object.entries(data.relationships.total)
            .slice(0, 10)
            .map(([address, count], index) => {
              const inTxns = data.relationships.byDirection.in[address] || 0;
              const outTxns = data.relationships.byDirection.out[address] || 0;
              return `<div class="flex items-baseline gap-2">
                <span class="text-gray-500">${index + 1}.</span>
                <span class="font-mono break-all">${address}</span>
                <span class="text-gray-500 ml-auto">(${inTxns + outTxns} TXNs)</span>
              </div>`;
            })
            .join('');
          relationshipsContainer.innerHTML = topRelationships;
        }

        // Update timezone data
        const timezoneContainer = document.getElementById('timezone-data');
        if (data.timezone) {
          // Group transactions into 4-hour blocks
          const blocks = Array.from({ length: 6 }, (_, i) => {
            const startHour = i * 4;
            const endHour = startHour + 3;
            const hours = Array.from({ length: 4 }, (_, h) => startHour + h);
            const transactions = hours.reduce((sum, hour) => {
              return sum + (data.timezone[hour] ? data.timezone[hour].length : 0);
            }, 0);
            return {
              startHour,
              endHour,
              transactions
            };
          });

          const maxTransactions = Math.max(...blocks.map(b => b.transactions));

          timezoneContainer.innerHTML = blocks.map(block => {
            const width = block.transactions === 0
              ? 0
              : (block.transactions / maxTransactions) * 50;

            return `<div class="flex items-center">
              <div class="shrink-0">
                <span class="font-mono text-sm">${block.startHour.toString().padStart(2, '0')}:00-</span>
              </div>
              <div class="w-[4.5rem] shrink-0">
                <span class="font-mono text-sm">${(block.endHour + 1).toString().padStart(2, '0')}:00</span>
              </div>
              <div class="flex-1 flex items-center gap-3">
                ${block.transactions > 0
                  ? `<div class="h-1.5 bg-black transition-all duration-300" style="width: ${width}%"></div>`
                  : ''
                }
                <span class="font-mono text-sm text-gray-500">${block.transactions} txns</span>
              </div>
            </div>`;
          }).join('');
        }
      }
    </script>

    <script defer type="module" src="/site/audit/index.js"></script>
  </body>
</html>
